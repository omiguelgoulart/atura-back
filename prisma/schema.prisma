// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Marca {
  id       Int       @id @default(autoincrement())
  nome     String
  produtos Produto[]

  @@map("marca")
}

model Produto {
  id         Int          @id @default(autoincrement())
  nome       String
  descricao  String
  preco      Float
  categoria  String
  estoque    Int
  volumeMl   Int          @default(0)
  marca      Marca        @relation(fields: [marca_id], references: [id])
  marca_id   Int
  foto       String
  fotos      Fotos[]
  itemPedido ItemTransacao[]
  avaliacao  Avaliacao[]

  @@map("produto")
}

model Fotos {
  id        Int     @id @default(autoincrement())
  descricao String
  url       String
  produto   Produto @relation(fields: [produtoId], references: [id])
  produtoId Int

  @@map("fotos")
}

model Cliente {
  id                String      @id @default(uuid()) @db.VarChar(36)
  nome              String      @db.VarChar(60)
  email             String      @unique
  senha             String      @db.VarChar(60)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  resetToken        String?
  resetTokenExpires DateTime?
  pedidos           Pedido[]
  avaliacao         Avaliacao[]
  endereco          Endereco[]
  telefone          String?     @db.VarChar(15)
  itensTransacao    ItemTransacao[] @relation("ClienteToItemTransacao")

  @@map("clientes")
}

model Endereco {
  id          Int     @id @default(autoincrement())
  rua         String  @db.VarChar(100)
  numero      String  @db.VarChar(20)
  cidade      String  @db.VarChar(100)
  estado      String  @db.VarChar(50)
  cep         String  @db.VarChar(20)
  complemento String? @db.VarChar(100)

  cliente   Cliente @relation(fields: [clienteId], references: [id])
  clienteId String

  pedidos Pedido[] // pedidos que usaram este endere칞o

  @@map("enderecos")
}

model Pedido {
  id         Int       @id @default(autoincrement())
  date       DateTime
  status     STATUS_PEDIDO
  total      Decimal   @db.Decimal(10, 2)

  cliente    Cliente   @relation(fields: [clienteId], references: [id])
  clienteId  String

  endereco   Endereco? @relation(fields: [enderecoId], references: [id])
  enderecoId Int?

  itens      ItemTransacao[]

  @@map("pedidos")
}

enum STATUS_PEDIDO {
  PENDENTE
  PROCESSANDO
  ENVIADO
  ENTREGUE
  CANCELADO
}


enum STATUS {
  PENDENTE
  PROCESSANDO
  ENVIADO
  ENTREGUE
  CANCELADO
}

model ItemTransacao {
  id             Int       @id @default(autoincrement())
  status         STATUS_ITEM  @default(CARRINHO)
  quantidade     Int          @default(1)
  preco_unitario Decimal   @db.Decimal(10, 2)
  cliente        Cliente?   @relation("ClienteToItemTransacao", fields: [clienteId], references: [id])
  clienteId      String

  produto        Produto?   @relation(fields: [produtoId], references: [id])
  produtoId      Int?

  pedido         Pedido?   @relation(fields: [pedidoId], references: [id])
  pedidoId       Int?

  criadoEm       DateTime  @default(now())
  atualizadoEm   DateTime  @updatedAt

  @@map("itensTransacao")
}

enum STATUS_ITEM {
  CARRINHO     // aparece no carrinho
  PEDIDO       // na tela de "finalizar pedido"
  FINALIZADO   // no hist칩rico
}

model Avaliacao {
  id         Int                 @id @default(autoincrement())
  nota       Int
  comentario String?             @db.VarChar(500)
  date       DateTime            @default(now())

  cliente    Cliente             @relation(fields: [clienteId], references: [id])
  clienteId  String

  produto    Produto             @relation(fields: [produtoId], references: [id])
  produtoId  Int

  respostas  RespostaAvaliacao[]  // 游대 v치rias respostas

  @@map("avaliacoes")
}

model RespostaAvaliacao {
  id           Int       @id @default(autoincrement())
  mensagem     String    @db.VarChar(1000)
  respondidoEm DateTime  @default(now())

  avaliacao    Avaliacao @relation(fields: [avaliacaoId], references: [id])
  avaliacaoId  Int

  admin        Admin?    @relation(fields: [adminId], references: [id])
  adminId      String?

  @@map("respostasAvaliacao")
}

model Admin {
  id                String      @id @default(uuid()) @db.VarChar(36)
  nome      String    @db.VarChar(60)
  email     String    @unique
  senha     String    @db.VarChar(60)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  respostas RespostaAvaliacao[] // 游대 v치rias respostas

  @@map("admins")
}